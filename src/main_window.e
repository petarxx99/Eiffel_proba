note
	description: "Main window for this application."
	author: "Generated by the Vision Application Wizard."
	date: "$Date: 2023/2/19 21:38:29 $"
	revision: "1.0.1"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		do
				-- Create main container.
			create main_container
				-- Create the menu bar.
			create standard_menu_bar
				-- Create file menu.
			create file_menu.make_with_text (Menu_file_item)
				-- Create help menu.
			create help_menu.make_with_text (Menu_help_item)

			-- create widgets for calculator such as text fields, labels etc.
			create_widgets_for_calculator

		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
			build_standard_menu_bar
			set_menu_bar (standard_menu_bar)

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	build_standard_menu_bar
			-- Create and populate `standard_menu_bar'.
		do
				-- Add the "File" menu.
			build_file_menu
			standard_menu_bar.extend (file_menu)
				-- Add the "Help" menu.
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_initialized: not standard_menu_bar.is_empty
		end

	build_file_menu
			-- Create and populate `file_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_file_new_item)
				--| TODO: Add the action associated with "New" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_open_item)
				--| TODO: Add the action associated with "Open" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_save_item)
				--| TODO: Add the action associated with "Save" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_saveas_item)
				--| TODO: Add the action associated with "Save As..." here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)

			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_initialized: not file_menu.is_empty
		end

	build_help_menu
			-- Create and populate `help_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)

		ensure
			help_menu_initialized: not help_menu.is_empty
		end

feature {NONE} -- About Dialog Implementation

	on_about
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	first_number_field: EV_TEXT_FIELD;
	second_number_field: EV_TEXT_FIELD;
	operator: EV_COMBO_BOX;
	result_label: EV_LABEL;
	button_to_calculate: EV_BUTTON;

	set_widget_size(control: EV_WIDGET; height_to_set, width_to_set: INTEGER)
			-- setting width and height to a widget
			require control_is_not_void: control /= Void
			do
				control.set_minimum_height(height_to_set);
				control.set_minimum_width(width_to_set);

				ensure
					control_width_is_set_ok: control.width >= width_to_set
					control_height_is_set_ok: control.height >= height_to_set
			end


		create_widgets_for_calculator
			-- create text fields, label and checkbox for operator
			require
				nothing: True

			local
				plus, minus, multiply, divide: EV_LIST_ITEM;
			do

				create first_number_field.make_with_text("First");
				create second_number_field.make_with_text("Second");
				create result_label;

				create operator;
				create plus.make_with_text(plus_sign_text);
				create minus.make_with_text(minus_sign_text);
				create multiply.make_with_text(multiply_sign_text);
				create divide.make_with_text(divide_sign_text);
				operator.extend(plus);
				operator.extend(minus);
				operator.extend(multiply);
				operator.extend(divide);

				create button_to_calculate.make_with_text("Click here to calculate");
				ensure
					there_are_4_operators: operator.count = 4
			end


	calculate_user_input
			-- Based on the numbers that user has entered and the operation that he has requested, we will display the result
			local
			number_1, number_2: INTEGER;
			result_of_operation: String;
			selected_item: detachable EV_LIST_ITEM;
			operator_as_string: String;
			text_from_field_1, text_from_field_2: String;
			do
				text_from_field_1 := first_number_field.text;
				text_from_field_1.trim;
				text_from_field_2 := second_number_field.text;
				text_from_field_2.trim;

				number_1 := text_from_field_1.to_integer;
				number_2 := text_from_field_2.to_integer;
				selected_item := operator.selected_item;

				if selected_item = Void then
					result_label.set_text("You haven't chosen an operation")
				else
					operator_as_string := selected_item.text.to_string_8;

					if operator_as_string.is_equal(plus_sign_text) then
						result_of_operation := (number_1 + number_2).out;
					elseif operator_as_string.is_equal(minus_sign_text) then
						result_of_operation := (number_1 - number_2).out;
					elseif operator_as_string.is_equal(multiply_sign_text) then
						result_of_operation := (number_1 * number_2).out;
					else
						if number_2 = 0 then
							result_of_operation := "You can't divide by 0.";
						else
							result_of_operation := (number_1 / number_2).out;
						end
					end

					result_label.set_text(result_of_operation.out);
				end

				first_number_field.set_text("");
				second_number_field.set_text("");
			end


	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window).

	build_main_container
			-- Populate `main_container'.
			local label_info: EV_LABEL
		do
			main_container.extend (create {EV_TEXT})
			create label_info.make_with_text("Write your numbers below");
			main_container.extend(label_info);
			
			first_number_field.set_minimum_width (control_width);
			main_container.extend (first_number_field);

			operator.set_minimum_width(control_width);
			main_container.extend(operator);

			second_number_field.set_minimum_width (control_width);
			main_container.extend (second_number_field);

			button_to_calculate.set_minimum_width (control_width);
			-- The following line of code can't be called from create_objects_interface or any procedure inside that procedure.
			-- The reason is that apparently the following line of code requires the Current to be in a valid state.
			-- If the following line of code is called from create_objects_interface then Current isn't yet in a valid state.
			-- At least that's what I extrapulated from this answer and from compiler errors.
			-- https://stackoverflow.com/questions/54163214/eiffel-error-variable-is-not-properly-set-in-make-calling-default-create-or-a
			button_to_calculate.select_actions.extend(agent calculate_user_input);
			main_container.extend(button_to_calculate);

			result_label.set_minimum_width(control_width);
			main_container.extend(result_label);
		ensure
			main_container_created: main_container /= Void
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "my_vision2_application_1"
			-- Title of the window.

	Window_width: INTEGER = 400
			-- Initial width for this window.

	Window_height: INTEGER = 400
			-- Initial height for this window.

	control_height: INTEGER = 50
			-- Initial height of controls

	control_width: INTEGER = 20
			-- Initial width of controls

	plus_sign_text: String = "+"

	minus_sign_text: String = "-"

	multiply_sign_text: String = "*"

	divide_sign_text: String = "/"
end
